{"version":3,"sources":["job.controller.js"],"names":["jwtEncode","require","db","setToken","set","Job","jobs","moment","limitAccNum","expirationTime","exports","postJob","req","res","console","log","user","jobId","find","sort","limit","lastJob","lastJobId","length","newJobId","findOne","isUser","response","body","entryDate","Date","auth","save","payload","email","userRole","iat","Math","floor","now","exp","token","status","json","message","content","id","updateData","bid","timeSheet","findOneAndUpdate","$set","err","updatedDocument","error","shifts","role","headers","data","dataArray","map","item","index","push","degree","jobNum","location","unit","shiftDate","shift","bid_offer","jobStatus","Hired","timeSheetVerified","jobRating","payRate","shiftDates","bonus","jobData"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Job = db.jobs;\r\nconst moment = require('moment');\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 1800;\r\n//Regiseter Account\r\nexports.postJob = async (req, res) => {\r\n  try {\r\n    console.log(\"register\");\r\n    // const accountId = req.params.accountId;\r\n\r\n    const user = req.user\r\n    if (req.jobId) {\r\n      const lastJob = await Job.find().sort({ jobId: -1 }).limit(1); // Retrieve the last jobId\r\n      const lastJobId = lastJob.length > 0 ? lastJob[0].jobId : 0; // Get the last jobId value or default to 0\r\n      const newJobId = lastJobId + 1; // Increment the last jobId by 1 to set the new jobId for the next data entry\r\n      const isUser = await Job.findOne({ jobId: newJobId });\r\n      const response = req.body;\r\n      console.log(\"new Id------------->\", newJobId)\r\n      response.entryDate = new Date();\r\n      response.jobId = newJobId;\r\n      const auth = new Job(response);\r\n      await auth.save();\r\n      const payload = {\r\n        email: user.email,\r\n        userRole: user.userRole,\r\n        iat: Math.floor(Date.now() / 1000), // Issued at time\r\n        exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      res.status(201).json({ message: \"Successfully Registered\", token: token });\r\n    }\r\n    else {\r\n      console.log('content', req.body.content)\r\n      const id = { jobId: req.body.jobId }\r\n      const updateData = { bid: req.body.content } || { timeSheet: req.body.timeSheet }\r\n      Job.findOneAndUpdate(\r\n        { id },\r\n        { $set: { updateData } },\r\n        { new: false },\r\n        (err, updatedDocument) => {\r\n          if (err) {\r\n            // Handle the error, e.g., return an error response\r\n            res.status(500).json({ error: err });\r\n            console.log(err);\r\n          } else {\r\n            console.log(\"updated\", updatedDocument);\r\n            const payload = {\r\n              email: user.email,\r\n              userRole: user.userRole,\r\n              iat: Math.floor(Date.now() / 1000), // Issued at time\r\n              exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            };\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            // Document updated successfully, return the updated document as the response\r\n            res.status(200).json({ message: 'Trading Signals saved Successfully', token: token, user: updatedDocument });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    return res.status(500).json({ message: \"An Error Occured!\" });\r\n  }\r\n}\r\n\r\n//Login Account\r\nexports.shifts = async (req, res) => {\r\n  try {\r\n    // console.log(\"shifts\");\r\n    const user = req.user;\r\n    const role = req.headers.role;\r\n    console.log('role------', req.headers.role);\r\n    const data = await Job.find({});\r\n    console.log(\"data---++++++++++++++++++++++++>\", data)\r\n    let dataArray = [];\r\n    if (role === 'Facilities') {\r\n      data.map((item, index) => {\r\n        dataArray.push([item.degree,\r\n        item.entryDate,\r\n        item.jobId,\r\n        item.jobNum,\r\n        item.location,\r\n        item.unit,\r\n        item.shiftDate,\r\n        item.shift,\r\n        item.bid_offer,\r\n        item.bid,\r\n        item.jobStatus,\r\n        item.Hired,\r\n        item.timeSheetVerified,\r\n        item.jobRating,\r\n\r\n          \"delete\"])\r\n      })\r\n    }\r\n    else if (role === \"Clinicians\") {\r\n      data.map((item, index) => {\r\n        dataArray.push({\r\n          jobId: item.jobId,\r\n          unit: item.unit,\r\n          jobNum: item.jobNum,\r\n          degree: item.degree,\r\n          location: item.location,\r\n          shiftDate: item.shiftDate,\r\n          jobStatus: item.jobStatus,\r\n          payRate: item.payRate,\r\n          shiftDates: '',\r\n          bonus: item.bonus,\r\n        })\r\n      })\r\n    }\r\n    const payload = {\r\n      email: user.email,\r\n      userRole: user.userRole,\r\n      iat: Math.floor(Date.now() / 1000), // Issued at time\r\n      exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n    }\r\n    const token = setToken(payload);\r\n    // console.log('token----------------------------------------------------->',token);\r\n    if (token) {\r\n      // const updateUser = await Job.updateOne({email: email, userRole: userRole}, {$set: {logined: true}});\r\n      res.status(200).json({ message: \"Successfully Get!\", jobData: dataArray, token: token });\r\n    }\r\n    else {\r\n      res.status(400).json({ message: \"Cannot logined User!\" })\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    return res.status(500).json({ message: \"An Error Occured!\" })\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"file":"job.controller.dev.js"}