{"version":3,"sources":["user.controller.js"],"names":["jwtEncode","require","db","secret","exports","req","res","regeneratorRuntime","async","_context","prev","next","User","find","create","send","data","err","status","message","body","length","user","id","email","firstName","lastName","password","userId","save","stop","login","iat","exp","_context2","time","then","response","serviceToken","authToken","name"],"mappings":"aAAA,IAAMA,UAAYC,QAAQ,cACpBC,GAAKD,QAAQ,aADbD,KAASE,GAAGD,MAGZE,OAAS,SAAfC,QAAMD,OAAS,SAGfE,EAAAC,GAHe,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAKXC,KAAKC,KAAK,IADdT,KAAQU,SAAAA,GAASR,EAAAS,KAAAC,KACb,MADa,SAAAC,GAAAX,EAAAY,OAAA,KAAAH,KAAA,CACbH,QAAKC,EAAKM,SACJ,kDAIJb,KAAAA,KAAAA,CAAAA,MAAIY,EAAOE,KAAKL,QACdI,KAAAA,SAAAA,GADmB,GAArB,IAAqBH,EAArBK,OAAqB,CAGtB,IARDC,EAAA,IAAAV,KAAA,CASFA,GAAIP,EAACQ,KAAKU,GAAEC,MAAKnB,EAAEA,KAAIe,MAAbK,UACFpB,EAAAe,KAACJ,UACLU,SAAQrB,EAACgB,KAALK,SACFC,SAAML,EAAIF,KAAOR,SACfW,UAAIlB,EAAIe,KAAKG,UACbC,OAAAA,EAAKJ,KAAMA,SAEXM,EAAAA,KAAAA,MAXJpB,MAcIsB,SAAAA,GAPoBtB,EAAAY,OAAtB,KAAAH,KAAA,CASAO,QAAAA,EAAKO,SAAL,kDA1BO,KAAA,EAAA,IAAA,MAAA,OAAApB,EAAAqB,WA8Cf1B,QAAQ2B,MAAQ,SAAO1B,EAAKC,GAAZ,IAAA0B,EAAAC,EAAA,OAAA1B,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EA1CCqB,EAAA3B,EAAAe,KAAAe,KAAAF,EAAA5B,EAAAe,KAAAe,KAAA,IAAAvB,KAAAC,KAAA,CAAAW,MAAAnB,EAAAe,KAAAI,QAAAY,KAAA,SAAApB,GAAA,GAAA,IAAAA,EAAAK,OAAjBf,EAAAS,KAAA,yBAkDa,GAAGC,EAAK,GAAGW,WAAatB,EAAIe,KAAKO,SARtCI,EAAAA,KAAQ,sBAAA,CAAA,IAAAH,EAAAZ,EAAA,GAAAO,GAYRc,EAAY,CACZC,aAbQtC,UAAA,CAAA4B,OAAAA,EACRI,IADQA,EAERC,IAFQA,GAIdrB,QAUQgB,KAVWvB,CAATmB,MAAVR,EACQ,GAAAQ,MACJD,GAAAP,EAAIA,GAAKK,IACPf,KAAAA,GAAAA,OAAIS,EAAK,GAAAU,UAATnB,KAAAA,OAASU,EAAT,GAAAU,UACDE,OAFDZ,EAEUA,GAAAA,OACRV,UAAIS,EAAK,GAAAwB,YAOPN,EAAAA,KAAAA,MA1DO,MA6DPT,SAAAA,GACAD,EAAAA,OAAAA,KAAIP,KAAA,CACJwB,QAAAA,EAAIrB,SAAIH,kDArBF,KAAA,EAAA,IAAA,MAAA,OAAAkB,EAAAJ","file":"user.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\nconst db = require(\"../models\");\nconst User = db.users;\nconst secret = 'secret';\n\n\n// Create and Save a new user\nexports.create = async (req, res) => {\n    User.find({})\n    .then((data) => {\n      res.send(data)\n    })\n    .catch((err) => {\n      res.status(500).send({\n        message: err.message || \"Some error occurred while retrieving spots.\",\n      });\n    });\n  User.find({ email: req.body.email })\n    .then((data) => {\n      if (data.length === 0) {\n        const user = new User({\n          id: req.body.id,\n          email: req.body.email,\n          firstName: req.body.firstName,\n          lastName: req.body.lastName,\n          password: req.body.password,\n          authToken: req.body.authToken,\n          userId: req.body.userId\n        });\n        user.save(user);\n      } else return;\n    })\n    .catch((err) => {\n      res.status(500).send({\n        message: err.message || \"Some error occurred while retrieving spots.\",\n      });\n    });\n\n  //   const user = new User({\n  //     // walletAddress: req.body.data.walletAddress,\n  //     id: req.body.id,\n  //     email: req.body.email,\n  //     firstName: req.body.firstName,\n  //     lastName: req.body.lastName,\n  //     password: req.body.password,\n  //   });\n  //   user.save(user)\n};\n\nexports.login = async (req, res) => {\n  const iat = req.body.time\n  const exp = req.body.time + 600\n\n  User.find({ email: req.body.email })\n    .then((data) => {\n      if (data.length === 0) {\n        res.send('There is no user')\n      } else if(data[0].password !== req.body.password){\n        res.send('Wrong Password')\n      }\n       else {\n        const userId = data[0].id\n        const serviceToken = jwtEncode({\n          userId: userId,\n          iat: iat,\n          exp: exp\n        }, secret)\n        const user = {\n          email: data[0].email,\n          id: data[0]._id,\n          name:`${data[0].firstName} ${data[0].lastName}`,\n          userId: data[0].userId,\n          authToken: data[0].authToken\n        }\n        const response = {\n          serviceToken:serviceToken,\n          user:user\n        }\n        res.send(response)\n      }\n    })\n    .catch((err) => {\n      res.status(500).send({\n        message: err.message || \"Some error occurred while retrieving spots.\",\n      });\n    });\n\n};\n"]}