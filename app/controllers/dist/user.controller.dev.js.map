{"version":3,"sources":["user.controller.js"],"names":["jwtEncode","require","db","User","users","secret","exports","create","req","res","find","then","data","send","err","status","message","email","body","length","user","id","firstName","lastName","password","authToken","userId","save","login","iat","time","exp","serviceToken","_id","name","response"],"mappings":";;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAME,IAAI,GAAGD,EAAE,CAACE,KAAhB;AACA,IAAMC,MAAM,GAAG,QAAf,C,CAGA;;AACAC,OAAO,CAACC,MAAR,GAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACbN,UAAAA,IAAI,CAACO,IAAL,CAAU,EAAV,EACCC,IADD,CACM,UAACC,IAAD,EAAU;AACdH,YAAAA,GAAG,CAACI,IAAJ,CAASD,IAAT;AACD,WAHD,WAIO,UAACE,GAAD,EAAS;AACdL,YAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AACnBG,cAAAA,OAAO,EAAEF,GAAG,CAACE,OAAJ,IAAe;AADL,aAArB;AAGD,WARD;AASFb,UAAAA,IAAI,CAACO,IAAL,CAAU;AAAEO,YAAAA,KAAK,EAAET,GAAG,CAACU,IAAJ,CAASD;AAAlB,WAAV,EACGN,IADH,CACQ,UAACC,IAAD,EAAU;AACd,gBAAIA,IAAI,CAACO,MAAL,KAAgB,CAApB,EAAuB;AACrB,kBAAMC,IAAI,GAAG,IAAIjB,IAAJ,CAAS;AACpBkB,gBAAAA,EAAE,EAAEb,GAAG,CAACU,IAAJ,CAASG,EADO;AAEpBJ,gBAAAA,KAAK,EAAET,GAAG,CAACU,IAAJ,CAASD,KAFI;AAGpBK,gBAAAA,SAAS,EAAEd,GAAG,CAACU,IAAJ,CAASI,SAHA;AAIpBC,gBAAAA,QAAQ,EAAEf,GAAG,CAACU,IAAJ,CAASK,QAJC;AAKpBC,gBAAAA,QAAQ,EAAEhB,GAAG,CAACU,IAAJ,CAASM,QALC;AAMpBC,gBAAAA,SAAS,EAAEjB,GAAG,CAACU,IAAJ,CAASO,SANA;AAOpBC,gBAAAA,MAAM,EAAElB,GAAG,CAACU,IAAJ,CAASQ;AAPG,eAAT,CAAb;AASAN,cAAAA,IAAI,CAACO,IAAL,CAAUP,IAAV;AACD,aAXD,MAWO;AACR,WAdH,WAeS,UAACN,GAAD,EAAS;AACdL,YAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AACnBG,cAAAA,OAAO,EAAEF,GAAG,CAACE,OAAJ,IAAe;AADL,aAArB;AAGD,WAnBH,EAVe,CA+Bf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvCe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AA0CAV,OAAO,CAACsB,KAAR,GAAgB,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACRoB,UAAAA,GADQ,GACFrB,GAAG,CAACU,IAAJ,CAASY,IADP;AAERC,UAAAA,GAFQ,GAEFvB,GAAG,CAACU,IAAJ,CAASY,IAAT,GAAgB,GAFd;AAId3B,UAAAA,IAAI,CAACO,IAAL,CAAU;AAAEO,YAAAA,KAAK,EAAET,GAAG,CAACU,IAAJ,CAASD;AAAlB,WAAV,EACGN,IADH,CACQ,UAACC,IAAD,EAAU;AACd,gBAAIA,IAAI,CAACO,MAAL,KAAgB,CAApB,EAAuB;AACrBV,cAAAA,GAAG,CAACI,IAAJ,CAAS,kBAAT;AACD,aAFD,MAEO,IAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQY,QAAR,KAAqBhB,GAAG,CAACU,IAAJ,CAASM,QAAjC,EAA0C;AAC/Cf,cAAAA,GAAG,CAACI,IAAJ,CAAS,gBAAT;AACD,aAFM,MAGD;AACJ,kBAAMa,MAAM,GAAGd,IAAI,CAAC,CAAD,CAAJ,CAAQS,EAAvB;AACA,kBAAMW,YAAY,GAAGhC,SAAS,CAAC;AAC7B0B,gBAAAA,MAAM,EAAEA,MADqB;AAE7BG,gBAAAA,GAAG,EAAEA,GAFwB;AAG7BE,gBAAAA,GAAG,EAAEA;AAHwB,eAAD,EAI3B1B,MAJ2B,CAA9B;AAKA,kBAAMe,IAAI,GAAG;AACXH,gBAAAA,KAAK,EAAEL,IAAI,CAAC,CAAD,CAAJ,CAAQK,KADJ;AAEXI,gBAAAA,EAAE,EAAET,IAAI,CAAC,CAAD,CAAJ,CAAQqB,GAFD;AAGXC,gBAAAA,IAAI,YAAItB,IAAI,CAAC,CAAD,CAAJ,CAAQU,SAAZ,cAAyBV,IAAI,CAAC,CAAD,CAAJ,CAAQW,QAAjC,CAHO;AAIXG,gBAAAA,MAAM,EAAEd,IAAI,CAAC,CAAD,CAAJ,CAAQc,MAJL;AAKXD,gBAAAA,SAAS,EAAEb,IAAI,CAAC,CAAD,CAAJ,CAAQa;AALR,eAAb;AAOA,kBAAMU,QAAQ,GAAG;AACfH,gBAAAA,YAAY,EAACA,YADE;AAEfZ,gBAAAA,IAAI,EAACA;AAFU,eAAjB;AAIAX,cAAAA,GAAG,CAACI,IAAJ,CAASsB,QAAT;AACD;AACF,WA3BH,WA4BS,UAACrB,GAAD,EAAS;AACdL,YAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AACnBG,cAAAA,OAAO,EAAEF,GAAG,CAACE,OAAJ,IAAe;AADL,aAArB;AAGD,WAhCH;;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB","sourcesContent":["const jwtEncode = require('jwt-encode')\nconst db = require(\"../models\");\nconst User = db.users;\nconst secret = 'secret';\n\n\n// Create and Save a new user\nexports.create = async (req, res) => {\n    User.find({})\n    .then((data) => {\n      res.send(data)\n    })\n    .catch((err) => {\n      res.status(500).send({\n        message: err.message || \"Some error occurred while retrieving spots.\",\n      });\n    });\n  User.find({ email: req.body.email })\n    .then((data) => {\n      if (data.length === 0) {\n        const user = new User({\n          id: req.body.id,\n          email: req.body.email,\n          firstName: req.body.firstName,\n          lastName: req.body.lastName,\n          password: req.body.password,\n          authToken: req.body.authToken,\n          userId: req.body.userId\n        });\n        user.save(user);\n      } else return;\n    })\n    .catch((err) => {\n      res.status(500).send({\n        message: err.message || \"Some error occurred while retrieving spots.\",\n      });\n    });\n\n  //   const user = new User({\n  //     // walletAddress: req.body.data.walletAddress,\n  //     id: req.body.id,\n  //     email: req.body.email,\n  //     firstName: req.body.firstName,\n  //     lastName: req.body.lastName,\n  //     password: req.body.password,\n  //   });\n  //   user.save(user)\n};\n\nexports.login = async (req, res) => {\n  const iat = req.body.time\n  const exp = req.body.time + 600\n\n  User.find({ email: req.body.email })\n    .then((data) => {\n      if (data.length === 0) {\n        res.send('There is no user')\n      } else if(data[0].password !== req.body.password){\n        res.send('Wrong Password')\n      }\n       else {\n        const userId = data[0].id\n        const serviceToken = jwtEncode({\n          userId: userId,\n          iat: iat,\n          exp: exp\n        }, secret)\n        const user = {\n          email: data[0].email,\n          id: data[0]._id,\n          name:`${data[0].firstName} ${data[0].lastName}`,\n          userId: data[0].userId,\n          authToken: data[0].authToken\n        }\n        const response = {\n          serviceToken:serviceToken,\n          user:user\n        }\n        res.send(response)\n      }\n    })\n    .catch((err) => {\n      res.status(500).send({\n        message: err.message || \"Some error occurred while retrieving spots.\",\n      });\n    });\n\n};\n"],"file":"user.controller.dev.js"}