{"version":3,"sources":["facilities.controller.js"],"names":["jwtEncode","require","db","set","Facility","facilities","limitAccNum","setToken","exports","signup","req","res","console","log","response","body","findOne","contactEmail","isUser","entryDate","Date","auth","save","payload","userRole","Math","floor","exp","now","expirationTime","token","status","json","message","_context","t0","_req$body","password","regeneratorRuntime","async","_context2","prev","next","awrap","sent","email","iat","updateOne","$set","userStatus","abrupt","stop","Update","request","user","_context3","findOneAndUpdate","new","err","updatedDocument","error","logout","_context4","Auth","accountId","logined"],"mappings":"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","file":"facilities.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Facility = db.facilities;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 1800;\r\n//Register Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"register\");\r\n        const response = req.body;\r\n        console.log('user', req.body)\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Facility.findOne({ contactEmail: response.contactEmail });\r\n        console.log('isUser--------------------->', isUser);\r\n        if (!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Facility(response);\r\n            console.log(auth)\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.contactEmail,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            res.status(201).json({ message: \"Successfully Registered\", token: token });\r\n        }\r\n        else {\r\n            res.status(409).json({ message: \"The Email is already registered\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const { contactEmail, password, userRole } = req.body;\r\n        console.log(\"email: \", contactEmail)\r\n        const isUser = await Facility.findOne({ contactEmail: contactEmail, password: password, userRole: userRole });\r\n        if (isUser) {\r\n            console.log('isUser', isUser)\r\n            const payload = {\r\n                contactEmail: isUser.contactEmail,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Facility.updateOne({ contactEmail: contactEmail, userRole: userRole }, { $set: { userStatus: true } });\r\n                res.status(200).json({ message: \"Successfully Logined!\", token: token, user: isUser });\r\n            }\r\n            else {\r\n                res.status(400).json({ message: \"Cannot logined User!\" })\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({ message: \"User Not Found! Please Register First.\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" })\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n    console.log('updateSignal');\r\n    const request = req.body;\r\n    const user = req.user;\r\n    if (user) {\r\n        console.log(\"items\");\r\n        Facility.findOneAndUpdate({ user }, { $set: request }, { new: false }, (err, updatedDocument) => {\r\n            if (err) {\r\n                // Handle the error, e.g., return an error response\r\n                res.status(500).json({ error: err });\r\n                console.log(err);\r\n            } else {\r\n                console.log(\"updated\", updatedDocument);\r\n                const payload = {\r\n                    email: user.email,\r\n                    userRole: user.userRole,\r\n                    iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                    exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n                }\r\n                const token = setToken(payload);\r\n                console.log(token);\r\n                // Document updated successfully, return the updated document as the response\r\n                res.status(200).json({ message: 'Trading Signals saved Successfully', token: token, user: updatedDocument });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({ accountId: accountId }, { $set: { logined: false } });\r\n        res.status(200).json({ email: email, logined: logined })\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n"]}