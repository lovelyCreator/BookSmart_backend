{"version":3,"sources":["admin.controller.js"],"names":["jwtEncode","require","db","set","Admin","admins","nodemailer","setToken","expirationTime","exports","signup","req","res","response","auth","payload","token","regeneratorRuntime","async","_context","prev","next","body","awrap","findOne","email","sent","entryDate","Date","save","userRole","iat","Math","floor","now","exp","console","log","createTransport","service","user","process","env","USER","pass","PASS","tls","rejectUnauthorized","connectionTimeout","greetingTimeout","socketTimeout","from","to","subject","text","concat","firstName","transporter","t0","abrupt","status","json","message","stop","mailOptions","password","isUser","updateOne","$set","logined","_context2","Update","request","_context3","findOneAndUpdate","new","err","updatedDocument","error","Auth","accountId","_context4"],"mappings":"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","file":"admin.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Admin = db.admins;\r\nconst nodemailer = require('nodemailer');\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 1800;\r\n//Register Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"register\");\r\n        const response = req.body;\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Admin.findOne({ email: response.email });\r\n        // console.log(isUser);\r\n        if (!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Admin(response);\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.email,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            let transporter = nodemailer.createTransport({\r\n                service: 'Gmail',\r\n                auth: {\r\n                    user: process.env.USER || 'royhensley0727@gmail.com',\r\n                    pass: process.env.PASS || '0605sag0728'\r\n                },\r\n                tls: {\r\n                    rejectUnauthorized: false\r\n                },\r\n                connectionTimeout: 60000, // Set a higher connection timeout value (in milliseconds)\r\n                greetingTimeout: 30000, // Set a higher greeting timeout value (in milliseconds)\r\n                socketTimeout: 45000 // Set a higher socket timeout value (in milliseconds)\r\n            })\r\n            let mailOptions = {\r\n                from: process.env.USER || 'royhensley0727@gmail.com',\r\n                to: response.email || 'lovely7rh@gmail.com',\r\n                subject: 'BookSmart',\r\n                text: `Hi, ${response.firstName}. Congratuations!\r\n                Your mail is successfully Approved.\r\n                Now you can use this site.`\r\n            }\r\n            // transporter.sendMail(mailOptions, function(error, info){\r\n            //     if(error) {\r\n            //         console.log(error);\r\n            //     }\r\n            //     else {\r\n            //         console.log(\"Email sent:\" + info.response);\r\n            //     }\r\n            // })\r\n            res.status(201).json({ message: \"Successfully Regisetered\", token: token });\r\n\r\n        }\r\n        else {\r\n            res.status(409).json({ message: \"The Email is already registered\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const { email, password, userRole } = req.body;\r\n        const isUser = await Admin.findOne({ email: email, password: password, userRole: userRole });\r\n        if (isUser) {\r\n\r\n            const payload = {\r\n                email: isUser.email,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Admin.updateOne({ email: email, userRole: userRole }, { $set: { logined: true } });\r\n                res.status(200).json({ message: \"Successfully Logined!\", token: token, user: isUser });\r\n            }\r\n            else {\r\n                res.status(400).json({ message: \"Cannot logined User!\" })\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({ message: \"User Not Found! Please Register First.\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" })\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n    console.log('updateSignal');\r\n    const request = req.body;\r\n    const user = req.user;\r\n    if (user) {\r\n        console.log(\"items\");\r\n        Admin.findOneAndUpdate({ user }, { $set: request }, { new: false }, (err, updatedDocument) => {\r\n            if (err) {\r\n                // Handle the error, e.g., return an error response\r\n                res.status(500).json({ error: err });\r\n                console.log(err);\r\n            } else {\r\n                console.log(\"updated\", updatedDocument);\r\n                const payload = {\r\n                    email: user.email,\r\n                    userRole: user.userRole,\r\n                    iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                    exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n                }\r\n                const token = setToken(payload);\r\n                console.log(token);\r\n                // Document updated successfully, return the updated document as the response\r\n                res.status(200).json({ message: 'Trading Signals saved Successfully', token: token, user: updatedDocument });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({ accountId: accountId }, { $set: { logined: false } });\r\n        res.status(200).json({ email: email, logined: logined })\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n"]}