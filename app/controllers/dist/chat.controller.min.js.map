{"version":3,"sources":["chat.controller.js"],"names":["jwtEncode","require","db","Chat","chats","secret","exports","ChatUser","chatusers","res","walletAddress","existingUser","filter","update","regeneratorRuntime","async","_context","prev","next","req","body","awrap","findOne","sent","username","logined","updateOne","abrupt","status","json","isWalletLogin","t0","message","stop","create","_req$body","updateUser","newUser","_context2","console","log","unread","result","save","getMessage","AllMessages","_context3","find"],"mappings":"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","file":"chat.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst ChatUser = db.chatusers\r\nconst Chat = db.chats\r\nconst secret = 'secret';\r\n\r\nexports.wallet = async (req, res) => {\r\n    const { walletAddress } = req.body;\r\n    // console.log(req.body);\r\n    try {\r\n        const existingUser = await ChatUser.findOne({ walletAddress:walletAddress });\r\n        // console.log('user: ', existingUser)\r\n        if (existingUser) {\r\n            // const updateUser = ChatUser.updateOne({username:username, logined: true});\r\n            // console.log('log', updateUser.logined);\r\n            // console.log('user', existingUser.logined);\r\n            const filter = { username: existingUser.username };\r\n            const update = { logined: true };\r\n            const result = await ChatUser.updateOne(filter, update);\r\n            // console.log('result', result);\r\n            // console.log(existingUser);\r\n            return res.status(200).json({isWalletLogin: 'true', username: existingUser.username});\r\n        }\r\n        else {\r\n            // console.log('loges');\r\n            return res.status(200).json({ isWalletLogin: false });\r\n        }\r\n    } catch( error ) {\r\n        res.status(500).json({ message: 'An error occurred'});\r\n    }\r\n}\r\n// Create and Save a new user\r\nexports.create = async (req, res) => {\r\n    const { username, walletAddress } = req.body;\r\n    console.log(username, walletAddress)\r\n    try {\r\n        const existingUser = await ChatUser.findOne({ username:username });\r\n        console.log(existingUser);\r\n        if (existingUser) {\r\n            const updateUser = ChatUser.updateOne({username:username, logined: true})\r\n            console.log('log', updateUser.logined);\r\n            return res.status(400).json({ message: 'Username is already taken'});\r\n        }\r\n        const newUser = new ChatUser({ username:username, walletAddress: walletAddress, logined: true, unread });\r\n        console.log(newUser);\r\n        await newUser.save();\r\n        res.status(201).json(newUser);\r\n    } catch (e) {\r\n        res.status(500).json({ message: 'An error occurred'});\r\n    }\r\n};\r\n\r\nexports.getMessage = async (req, res) => {\r\n    // const { username } = req.body;\r\n    // console.log(username)\r\n    try {\r\n        const AllMessages = await Chat.find({});\r\n        // console.log(AllMessages);\r\n        if (!AllMessages) {\r\n            return res.status(400).json({ message: \"No messages\"});\r\n        }\r\n       return res.status(200).json({message: AllMessages}) ;\r\n    } catch (e) {\r\n        res.status(500).json({ message: 'An error occurred'});\r\n    }\r\n};\r\n\r\n\r\n// exports.login = async (req, res) => {\r\n//   const iat = req.body.time\r\n//   const exp = req.body.time + 600\r\n\r\n//   User.find({ email: req.body.email })\r\n//     .then((data) => {\r\n//       if (data.length === 0) {\r\n//         res.send('There is no user')\r\n//       } else if(data[0].password !== req.body.password){\r\n//         res.send('Wrong Password')\r\n//       }\r\n//        else {\r\n//         const userId = data[0].id\r\n//         const serviceToken = jwtEncode({\r\n//           userId: userId,\r\n//           iat: iat,\r\n//           exp: exp\r\n//         }, secret)\r\n//         const user = {\r\n//           email: data[0].email,\r\n//           id: data[0]._id,\r\n//           name:`${data[0].firstName} ${data[0].lastName}`,\r\n//           userId: data[0].userId,\r\n//           authToken: data[0].authToken\r\n//         }\r\n//         const response = {\r\n//           serviceToken:serviceToken,\r\n//           user:user\r\n//         }\r\n//         res.send(response)\r\n//       }\r\n//     })\r\n//     .catch((err) => {\r\n//       res.status(500).send({\r\n//         message: err.message || \"Some error occurred while retrieving spots.\",\r\n//       });\r\n//     });\r\n\r\n// };\r\n"]}