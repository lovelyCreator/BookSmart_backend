{"version":3,"sources":["job.controller.js"],"names":["jwtEncode","require","db","set","Job","moment","setToken","expirationTime","exports","postJob","req","res","user","lastJob","lastJobId","newJobId","response","auth","payload","token","id","updateData","regeneratorRuntime","async","_context","prev","next","log","jobs","limitAccNum","awrap","find","sort","jobId","limit","sent","length","findOne","body","console","entryDate","Date","save","email","userRole","iat","Math","floor","now","exp","status","json","message","content","bid","new","err","error","updatedDocument","isUser","t0","abrupt","stop","role","headers","data","index","dataArray","push","item","degree","jobNum","timeSheet","unit","shiftDate","bid_offer","$set","Hired","timeSheetVerified","jobRating","map","location","jobStatus","shiftDates","bonus","jobData","_context2"],"mappings":"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","file":"job.controller.min.js","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Job = db.jobs;\r\nconst moment = require('moment');\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 1800;\r\n//Regiseter Account\r\nexports.postJob = async (req, res) => {\r\n  try {\r\n    console.log(\"register\");\r\n    // const accountId = req.params.accountId;\r\n\r\n    const user = req.user\r\n    if (req.jobId) {\r\n      const lastJob = await Job.find().sort({ jobId: -1 }).limit(1); // Retrieve the last jobId\r\n      const lastJobId = lastJob.length > 0 ? lastJob[0].jobId : 0; // Get the last jobId value or default to 0\r\n      const newJobId = lastJobId + 1; // Increment the last jobId by 1 to set the new jobId for the next data entry\r\n      const isUser = await Job.findOne({ jobId: newJobId });\r\n      const response = req.body;\r\n      console.log(\"new Id------------->\", newJobId)\r\n      response.entryDate = new Date();\r\n      response.jobId = newJobId;\r\n      const auth = new Job(response);\r\n      await auth.save();\r\n      const payload = {\r\n        email: user.email,\r\n        userRole: user.userRole,\r\n        iat: Math.floor(Date.now() / 1000), // Issued at time\r\n        exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n      }\r\n      const token = setToken(payload);\r\n      console.log(token);\r\n      res.status(201).json({ message: \"Successfully Registered\", token: token });\r\n    }\r\n    else {\r\n      console.log('content', req.body.content)\r\n      const id = { jobId: req.body.jobId }\r\n      const updateData = { bid: req.body.content } || { timeSheet: req.body.timeSheet }\r\n      Job.findOneAndUpdate(\r\n        { id },\r\n        { $set: { updateData } },\r\n        { new: false },\r\n        (err, updatedDocument) => {\r\n          if (err) {\r\n            // Handle the error, e.g., return an error response\r\n            res.status(500).json({ error: err });\r\n            console.log(err);\r\n          } else {\r\n            console.log(\"updated\", updatedDocument);\r\n            const payload = {\r\n              email: user.email,\r\n              userRole: user.userRole,\r\n              iat: Math.floor(Date.now() / 1000), // Issued at time\r\n              exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            };\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            // Document updated successfully, return the updated document as the response\r\n            res.status(200).json({ message: 'Trading Signals saved Successfully', token: token, user: updatedDocument });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    return res.status(500).json({ message: \"An Error Occured!\" });\r\n  }\r\n}\r\n\r\n//Login Account\r\nexports.shifts = async (req, res) => {\r\n  try {\r\n    // console.log(\"shifts\");\r\n    const user = req.user;\r\n    const role = req.headers.role;\r\n    console.log('role------', req.headers.role);\r\n    const data = await Job.find({});\r\n    console.log(\"data---++++++++++++++++++++++++>\", data)\r\n    let dataArray = [];\r\n    if (role === 'Facilities') {\r\n      data.map((item, index) => {\r\n        dataArray.push([item.degree,\r\n        item.entryDate,\r\n        item.jobId,\r\n        item.jobNum,\r\n        item.location,\r\n        item.unit,\r\n        item.shiftDate,\r\n        item.shift,\r\n        item.bid_offer,\r\n        item.bid,\r\n        item.jobStatus,\r\n        item.Hired,\r\n        item.timeSheetVerified,\r\n        item.jobRating,\r\n\r\n          \"delete\"])\r\n      })\r\n    }\r\n    else if (role === \"Clinicians\") {\r\n      data.map((item, index) => {\r\n        dataArray.push({\r\n          jobId: item.jobId,\r\n          unit: item.unit,\r\n          jobNum: item.jobNum,\r\n          degree: item.degree,\r\n          location: item.location,\r\n          shiftDate: item.shiftDate,\r\n          jobStatus: item.jobStatus,\r\n          payRate: item.payRate,\r\n          shiftDates: '',\r\n          bonus: item.bonus,\r\n        })\r\n      })\r\n    }\r\n    const payload = {\r\n      email: user.email,\r\n      userRole: user.userRole,\r\n      iat: Math.floor(Date.now() / 1000), // Issued at time\r\n      exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n    }\r\n    const token = setToken(payload);\r\n    // console.log('token----------------------------------------------------->',token);\r\n    if (token) {\r\n      // const updateUser = await Job.updateOne({email: email, userRole: userRole}, {$set: {logined: true}});\r\n      res.status(200).json({ message: \"Successfully Get!\", jobData: dataArray, token: token });\r\n    }\r\n    else {\r\n      res.status(400).json({ message: \"Cannot logined User!\" })\r\n    }\r\n  } catch (e) {\r\n    console.log(e);\r\n    return res.status(500).json({ message: \"An Error Occured!\" })\r\n  }\r\n}\r\n\r\n\r\n\r\n"]}