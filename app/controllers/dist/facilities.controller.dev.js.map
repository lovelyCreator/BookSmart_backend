{"version":3,"sources":["facilities.controller.js"],"names":["jwtEncode","require","db","setToken","set","Facility","facilities","limitAccNum","expirationTime","exports","signup","req","res","console","log","response","body","findOne","contactEmail","isUser","entryDate","Date","auth","save","payload","email","userRole","iat","Math","floor","now","exp","token","status","json","message","login","password","updateOne","$set","userStatus","updateUser","user","Update","request","findOneAndUpdate","err","updatedDocument","error","logout","Auth","accountId","logined","logoutUser"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Facility = db.facilities;\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 1800;\r\n//Register Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"register\");\r\n        const response = req.body;\r\n        console.log('user', req.body)\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Facility.findOne({ contactEmail: response.contactEmail });\r\n        console.log('isUser--------------------->', isUser);\r\n        if (!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Facility(response);\r\n            console.log(auth)\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.contactEmail,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            res.status(201).json({ message: \"Successfully Registered\", token: token });\r\n        }\r\n        else {\r\n            res.status(409).json({ message: \"The Email is already registered\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const { contactEmail, password, userRole } = req.body;\r\n        console.log(\"email: \", contactEmail)\r\n        const isUser = await Facility.findOne({ contactEmail: contactEmail, password: password, userRole: userRole });\r\n        if (isUser) {\r\n            console.log('isUser', isUser)\r\n            const payload = {\r\n                contactEmail: isUser.contactEmail,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Facility.updateOne({ contactEmail: contactEmail, userRole: userRole }, { $set: { userStatus: true } });\r\n                res.status(200).json({ message: \"Successfully Logined!\", token: token, user: isUser });\r\n            }\r\n            else {\r\n                res.status(400).json({ message: \"Cannot logined User!\" })\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({ message: \"User Not Found! Please Register First.\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" })\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n    console.log('updateSignal');\r\n    const request = req.body;\r\n    const user = req.user;\r\n    if (user) {\r\n        console.log(\"items\");\r\n        Facility.findOneAndUpdate({ user }, { $set: request }, { new: false }, (err, updatedDocument) => {\r\n            if (err) {\r\n                // Handle the error, e.g., return an error response\r\n                res.status(500).json({ error: err });\r\n                console.log(err);\r\n            } else {\r\n                console.log(\"updated\", updatedDocument);\r\n                const payload = {\r\n                    email: user.email,\r\n                    userRole: user.userRole,\r\n                    iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                    exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n                }\r\n                const token = setToken(payload);\r\n                console.log(token);\r\n                // Document updated successfully, return the updated document as the response\r\n                res.status(200).json({ message: 'Trading Signals saved Successfully', token: token, user: updatedDocument });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({ accountId: accountId }, { $set: { logined: false } });\r\n        res.status(200).json({ email: email, logined: logined })\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n"],"file":"facilities.controller.dev.js"}