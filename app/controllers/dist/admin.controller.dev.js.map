{"version":3,"sources":["admin.controller.js"],"names":["jwtEncode","require","db","setToken","set","Admin","admins","nodemailer","limitAccNum","expirationTime","exports","signup","req","res","console","log","response","body","findOne","email","isUser","entryDate","Date","auth","save","payload","userRole","iat","Math","floor","now","exp","token","transporter","createTransport","service","user","process","env","USER","pass","PASS","tls","rejectUnauthorized","connectionTimeout","greetingTimeout","socketTimeout","mailOptions","from","to","subject","text","firstName","status","json","message","login","password","updateOne","$set","logined","updateUser","Update","request","findOneAndUpdate","err","updatedDocument","error","logout","Auth","accountId","logoutUser"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst { setToken } = require('../utils/verifyToken');\r\nconst { set } = require('mongoose');\r\nconst Admin = db.admins;\r\nconst nodemailer = require('nodemailer');\r\n\r\nconst limitAccNum = 100;\r\nconst expirationTime = 1800;\r\n//Register Account\r\nexports.signup = async (req, res) => {\r\n    try {\r\n        console.log(\"register\");\r\n        const response = req.body;\r\n        // const accountId = req.params.accountId;\r\n        const isUser = await Admin.findOne({ email: response.email });\r\n        // console.log(isUser);\r\n        if (!isUser) {\r\n            response.entryDate = new Date();\r\n            const auth = new Admin(response);\r\n            await auth.save();\r\n            const payload = {\r\n                email: response.email,\r\n                userRole: response.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            let transporter = nodemailer.createTransport({\r\n                service: 'Gmail',\r\n                auth: {\r\n                    user: process.env.USER || 'royhensley0727@gmail.com',\r\n                    pass: process.env.PASS || '0605sag0728'\r\n                },\r\n                tls: {\r\n                    rejectUnauthorized: false\r\n                },\r\n                connectionTimeout: 60000, // Set a higher connection timeout value (in milliseconds)\r\n                greetingTimeout: 30000, // Set a higher greeting timeout value (in milliseconds)\r\n                socketTimeout: 45000 // Set a higher socket timeout value (in milliseconds)\r\n            })\r\n            let mailOptions = {\r\n                from: process.env.USER || 'royhensley0727@gmail.com',\r\n                to: response.email || 'lovely7rh@gmail.com',\r\n                subject: 'BookSmart',\r\n                text: `Hi, ${response.firstName}. Congratuations!\r\n                Your mail is successfully Approved.\r\n                Now you can use this site.`\r\n            }\r\n            // transporter.sendMail(mailOptions, function(error, info){\r\n            //     if(error) {\r\n            //         console.log(error);\r\n            //     }\r\n            //     else {\r\n            //         console.log(\"Email sent:\" + info.response);\r\n            //     }\r\n            // })\r\n            res.status(201).json({ message: \"Successfully Regisetered\", token: token });\r\n\r\n        }\r\n        else {\r\n            res.status(409).json({ message: \"The Email is already registered\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n\r\n//Login Account\r\nexports.login = async (req, res) => {\r\n    try {\r\n        console.log(\"LogIn\");\r\n        const { email, password, userRole } = req.body;\r\n        const isUser = await Admin.findOne({ email: email, password: password, userRole: userRole });\r\n        if (isUser) {\r\n\r\n            const payload = {\r\n                email: isUser.email,\r\n                userRole: isUser.userRole,\r\n                iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n            }\r\n            const token = setToken(payload);\r\n            console.log(token);\r\n            if (token) {\r\n                const updateUser = await Admin.updateOne({ email: email, userRole: userRole }, { $set: { logined: true } });\r\n                res.status(200).json({ message: \"Successfully Logined!\", token: token, user: isUser });\r\n            }\r\n            else {\r\n                res.status(400).json({ message: \"Cannot logined User!\" })\r\n            }\r\n        }\r\n        else {\r\n            res.status(404).json({ message: \"User Not Found! Please Register First.\" })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" })\r\n    }\r\n}\r\n\r\n//Update Account\r\nexports.Update = async (req, res) => {\r\n    console.log('updateSignal');\r\n    const request = req.body;\r\n    const user = req.user;\r\n    if (user) {\r\n        console.log(\"items\");\r\n        Admin.findOneAndUpdate({ user }, { $set: request }, { new: false }, (err, updatedDocument) => {\r\n            if (err) {\r\n                // Handle the error, e.g., return an error response\r\n                res.status(500).json({ error: err });\r\n                console.log(err);\r\n            } else {\r\n                console.log(\"updated\", updatedDocument);\r\n                const payload = {\r\n                    email: user.email,\r\n                    userRole: user.userRole,\r\n                    iat: Math.floor(Date.now() / 1000), // Issued at time\r\n                    exp: Math.floor(Date.now() / 1000) + expirationTime // Expiration time\r\n                }\r\n                const token = setToken(payload);\r\n                console.log(token);\r\n                // Document updated successfully, return the updated document as the response\r\n                res.status(200).json({ message: 'Trading Signals saved Successfully', token: token, user: updatedDocument });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n\r\n//Logout Account\r\nexports.logout = async (req, res) => {\r\n    try {\r\n        console.log('Logout');\r\n        const email = req.body;\r\n        const logoutUser = await Auth.updateOne({ accountId: accountId }, { $set: { logined: false } });\r\n        res.status(200).json({ email: email, logined: logined })\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(500).json({ message: \"An Error Occured!\" });\r\n    }\r\n}\r\n"],"file":"admin.controller.dev.js"}