{"version":3,"sources":["chat.controller.js"],"names":["jwtEncode","require","db","ChatUser","chatusers","Chat","chats","secret","exports","wallet","req","res","walletAddress","body","findOne","existingUser","filter","username","update","logined","updateOne","result","status","json","isWalletLogin","message","create","console","log","updateUser","newUser","unread","save","getMessage","find","AllMessages"],"mappings":"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","sourcesContent":["const jwtEncode = require('jwt-encode')\r\nconst db = require(\"../models\");\r\nconst ChatUser = db.chatusers\r\nconst Chat = db.chats\r\nconst secret = 'secret';\r\n\r\nexports.wallet = async (req, res) => {\r\n    const { walletAddress } = req.body;\r\n    // console.log(req.body);\r\n    try {\r\n        const existingUser = await ChatUser.findOne({ walletAddress:walletAddress });\r\n        // console.log('user: ', existingUser)\r\n        if (existingUser) {\r\n            // const updateUser = ChatUser.updateOne({username:username, logined: true});\r\n            // console.log('log', updateUser.logined);\r\n            // console.log('user', existingUser.logined);\r\n            const filter = { username: existingUser.username };\r\n            const update = { logined: true };\r\n            const result = await ChatUser.updateOne(filter, update);\r\n            // console.log('result', result);\r\n            // console.log(existingUser);\r\n            return res.status(200).json({isWalletLogin: 'true', username: existingUser.username});\r\n        }\r\n        else {\r\n            // console.log('loges');\r\n            return res.status(200).json({ isWalletLogin: false });\r\n        }\r\n    } catch( error ) {\r\n        res.status(500).json({ message: 'An error occurred'});\r\n    }\r\n}\r\n// Create and Save a new user\r\nexports.create = async (req, res) => {\r\n    const { username, walletAddress } = req.body;\r\n    console.log(username, walletAddress)\r\n    try {\r\n        const existingUser = await ChatUser.findOne({ username:username });\r\n        console.log(existingUser);\r\n        if (existingUser) {\r\n            const updateUser = ChatUser.updateOne({username:username, logined: true})\r\n            console.log('log', updateUser.logined);\r\n            return res.status(400).json({ message: 'Username is already taken'});\r\n        }\r\n        const newUser = new ChatUser({ username:username, walletAddress: walletAddress, logined: true, unread });\r\n        console.log(newUser);\r\n        await newUser.save();\r\n        res.status(201).json(newUser);\r\n    } catch (e) {\r\n        res.status(500).json({ message: 'An error occurred'});\r\n    }\r\n};\r\n\r\nexports.getMessage = async (req, res) => {\r\n    // const { username } = req.body;\r\n    // console.log(username)\r\n    try {\r\n        const AllMessages = await Chat.find({});\r\n        // console.log(AllMessages);\r\n        if (!AllMessages) {\r\n            return res.status(400).json({ message: \"No messages\"});\r\n        }\r\n       return res.status(200).json({message: AllMessages}) ;\r\n    } catch (e) {\r\n        res.status(500).json({ message: 'An error occurred'});\r\n    }\r\n};\r\n\r\n\r\n// exports.login = async (req, res) => {\r\n//   const iat = req.body.time\r\n//   const exp = req.body.time + 600\r\n\r\n//   User.find({ email: req.body.email })\r\n//     .then((data) => {\r\n//       if (data.length === 0) {\r\n//         res.send('There is no user')\r\n//       } else if(data[0].password !== req.body.password){\r\n//         res.send('Wrong Password')\r\n//       }\r\n//        else {\r\n//         const userId = data[0].id\r\n//         const serviceToken = jwtEncode({\r\n//           userId: userId,\r\n//           iat: iat,\r\n//           exp: exp\r\n//         }, secret)\r\n//         const user = {\r\n//           email: data[0].email,\r\n//           id: data[0]._id,\r\n//           name:`${data[0].firstName} ${data[0].lastName}`,\r\n//           userId: data[0].userId,\r\n//           authToken: data[0].authToken\r\n//         }\r\n//         const response = {\r\n//           serviceToken:serviceToken,\r\n//           user:user\r\n//         }\r\n//         res.send(response)\r\n//       }\r\n//     })\r\n//     .catch((err) => {\r\n//       res.status(500).send({\r\n//         message: err.message || \"Some error occurred while retrieving spots.\",\r\n//       });\r\n//     });\r\n\r\n// };\r\n"],"file":"chat.controller.dev.js"}