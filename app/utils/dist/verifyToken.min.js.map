{"version":3,"sources":["verifyToken.js"],"names":["jwt","require","db","Clinical","clinical","Facility","facilities","expirationTime","res","next","authorization","authHeader","verifyToken","log","console","token","status","json","success","message","process","env","JWT_SECRET_KEY","err","user","req","tokendata","sign","verifyUser","isUser","regeneratorRuntime","async","_context","prev","userRole","awrap","findOne","email","sent","setToken","Math","floor","Date","now","exp","stop","verifyAdmin","role","module","exports"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBACdC,GAAKD,QAAQ,aADbD,KAAMC,GAAAA,gBAGNE,SAAYD,GAAGE,SAFbC,SAAWH,GAAAI,WAIbC,eAAiB,OAFjBJ,YAAeC,SAAAA,EAArBI,EAAAC,GACMJ,IAAAA,EAAcC,EAAAA,QAApBI,cAMI,GAAIC,EAAY,CAHdC,QAAWC,IAAG,UACVF,IAAAA,EAAgBA,EAASD,MAAAA,KAA/B,GAEIC,GAGAG,QAAQD,IAAI,2BAA2B,OAAOE,IAH9CJ,EACQE,OAAIL,EAAAQ,OAAZ,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,4BAGInB,IAACe,OAAOA,EAAAK,QAAAC,IAAAC,eAAA,SAAAC,EAAAC,GACR,GAAUD,EAA2C,OAAhBT,QAATD,IAAA,MAAAU,GAA2Bf,EAAAQ,OAAA,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,qBAG3DM,EAAAD,KAAAA,EAQIf,QAJkCS,SAAO,SAAAQ,GACxC,OADG1B,IAAA2B,KAAAD,EAAAN,QAAAC,IAAAC,iBAeVM,WAAa,SAACH,EAAKjB,EAAKC,GAVrBG,YARDa,EAAAjB,EAAA,WAAA,IAAAqB,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAvB,MAAA,KAAA,EAAA,GASHoB,EAAA,GArBL,eAAAJ,EAAAD,KAAAU,SAYQ,OAAAF,EAAAvB,KAAA,EAAAqB,mBAAAK,MAuBmB9B,SAAS+B,QAAQ,CAACC,MAAOZ,EAAID,KAAKa,MAAOH,SAAUT,EAAID,KAAKU,YAvB/EF,EAAAvB,KAAA,EAAA,MAAA,KAAA,EAuBIoB,EAvBJG,EAAAM,KAAAN,EAAAvB,KAAA,GAAA,MAAA,KAAA,EAAA,GAYUiB,eAADD,EAAAD,KAAXe,SAZE,OAAAP,EAAAvB,KAAA,GAAAqB,mBAAAK,MAaJhC,SAAAiC,QAAA,CAAAC,MAAAZ,EAAAD,KAAAa,MAAAH,SAAAT,EAAAD,KAAAU,YAbIF,EAAAvB,KAAA,GAAA,MAAA,KAAA,GAaJoB,EAbIG,EAAAM,KAAA,KAAA,GAYRT,EAiBgCW,KAAKC,MAAMC,KAAKC,MAAQ,KAVpDlB,EAAAD,KAAAoB,KACYnB,EAAKjB,KAAKqB,EAAApB,KAAAD,EAAAQ,OAAA,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,qBAmBbX,EAAIQ,OAAO,KAAKC,KAAK,CAACC,SAAS,EAAOC,QAAS,+BAvCpD,KAAA,GAAA,IAAA,MAAA,OAAAa,EAAAa,aA4CFC,YAAc,SAACrB,EAAKjB,EAAKC,GAxBLG,YAAAa,EAAAjB,EAAA,WAAA,GAAA,UAAAiB,EAAAD,KAAAuB,KAGkB,OAHlBvC,EAAAQ,OAAA,KAAAC,KAAA,CAAAC,SAAA,EAAAC,QAAA,2BAGmBkB,OAHnBW,OAAAC,QAAA,CAmCtBrC,YAAAA,YAnCsBgB,WAAAA,WAAAkB,YAAAA,YAAAP,SAAAA","file":"verifyToken.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\nconst db = require(\"../models\");\nconst Auth = db.authentications;\nconst Clinical =  db.clinical;\nconst Facility = db.facilities;\nconst expirationTime = 2592000;\n\nconst verifyToken = (req, res, next) => {\n    const authHeader = req.headers.authorization;\n    // console.log(authHeader)\n    if (authHeader) {\n        console.log('hhhhhh')\n        const token = authHeader.split(' ')[1];\n        console.log('token=-================>',\"----\",token)\n        if (!token) {\n            return res.status(401).json({ success: false, message: \"You are not authorized!\" });\n        }\n    \n        // If token exists, verify the token\n        jwt.verify(token, process.env.JWT_SECRET_KEY, (err, user) => {\n            if (err) {\n                console.log('err',err)\n                return res.status(401).json({ success: false, message: \"Token is invalid\" });\n            }\n            req.user = user;\n            // console.log(req.user)\n            next();\n        });\n    }\n};\n\nconst setToken = (tokendata) => {\n    // console.log(process.env.JWT_SECRET_KEY)\n   const token = jwt.sign(tokendata, process.env.JWT_SECRET_KEY);\n   return token;\n}\n\nconst verifyUser = (req, res, next) => {\n    // console.log('verifyToken')\n    verifyToken(req, res, async () => {\n        let isUser = {};\n        if (req.user.userRole === \"Facilities\") {\n            isUser = await Facility.findOne({email: req.user.email, userRole: req.user.userRole})\n        } else if(req.user.userRole === \"Clinicians\") {\n            isUser = await Clinical.findOne({email: req.user.email, userRole: req.user.userRole})\n        }\n        // console.log(isUser, req.user)\n        if (isUser) {\n            const currentDate = Math.floor(Date.now() / 1000);\n            // console.log(currentDate);\n            if (currentDate < req.user.exp){\n                req.user = isUser;\n                // console.log('user', req.user)\n                next();\n            } else {\n                res.status(401).json({success: false, message: \"Token is expired\"})\n            }\n        }\n        else res.status(401).json({success: false, message: \"You are not authenticated!\"})\n    });\n\n};\n\nconst verifyAdmin = (req, res, next) => {\n    verifyToken(req, res, () => {\n        if (req.user.role === 'admin') {\n            next();\n        } else {\n            return res.status(401).json({ success: false, message: \"You are not authorized\" });\n        }\n    });\n};\n\nmodule.exports = {\n    verifyToken,\n    verifyUser,\n    verifyAdmin,\n    setToken\n};"]}