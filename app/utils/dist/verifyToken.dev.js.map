{"version":3,"sources":["verifyToken.js"],"names":["jwt","require","db","Auth","authentications","Clinical","clinical","Facility","facilities","expirationTime","verifyToken","req","res","next","authHeader","headers","authorization","console","log","token","split","status","json","success","message","verify","process","env","JWT_SECRET_KEY","err","user","setToken","tokendata","sign","verifyUser","isUser","userRole","findOne","email","currentDate","Math","floor","Date","now","exp","verifyAdmin","role","module","exports"],"mappings":"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","sourcesContent":["const jwt = require('jsonwebtoken');\nconst db = require(\"../models\");\nconst Auth = db.authentications;\nconst Clinical =  db.clinical;\nconst Facility = db.facilities;\nconst expirationTime = 2592000;\n\nconst verifyToken = (req, res, next) => {\n    const authHeader = req.headers.authorization;\n    // console.log(authHeader)\n    if (authHeader) {\n        console.log('hhhhhh')\n        const token = authHeader.split(' ')[1];\n        console.log('token=-================>',\"----\",token)\n        if (!token) {\n            return res.status(401).json({ success: false, message: \"You are not authorized!\" });\n        }\n    \n        // If token exists, verify the token\n        jwt.verify(token, process.env.JWT_SECRET_KEY, (err, user) => {\n            if (err) {\n                console.log('err',err)\n                return res.status(401).json({ success: false, message: \"Token is invalid\" });\n            }\n            req.user = user;\n            // console.log(req.user)\n            next();\n        });\n    }\n};\n\nconst setToken = (tokendata) => {\n    // console.log(process.env.JWT_SECRET_KEY)\n   const token = jwt.sign(tokendata, process.env.JWT_SECRET_KEY);\n   return token;\n}\n\nconst verifyUser = (req, res, next) => {\n    // console.log('verifyToken')\n    verifyToken(req, res, async () => {\n        let isUser = {};\n        if (req.user.userRole === \"Facilities\") {\n            isUser = await Facility.findOne({email: req.user.email, userRole: req.user.userRole})\n        } else if(req.user.userRole === \"Clinicians\") {\n            isUser = await Clinical.findOne({email: req.user.email, userRole: req.user.userRole})\n        }\n        // console.log(isUser, req.user)\n        if (isUser) {\n            const currentDate = Math.floor(Date.now() / 1000);\n            // console.log(currentDate);\n            if (currentDate < req.user.exp){\n                req.user = isUser;\n                // console.log('user', req.user)\n                next();\n            } else {\n                res.status(401).json({success: false, message: \"Token is expired\"})\n            }\n        }\n        else res.status(401).json({success: false, message: \"You are not authenticated!\"})\n    });\n\n};\n\nconst verifyAdmin = (req, res, next) => {\n    verifyToken(req, res, () => {\n        if (req.user.role === 'admin') {\n            next();\n        } else {\n            return res.status(401).json({ success: false, message: \"You are not authorized\" });\n        }\n    });\n};\n\nmodule.exports = {\n    verifyToken,\n    verifyUser,\n    verifyAdmin,\n    setToken\n};"],"file":"verifyToken.dev.js"}