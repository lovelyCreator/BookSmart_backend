{"version":3,"sources":["socketServer.js"],"names":["require","Server","mongoose","createSocketServer","httpServer","io","cors","origin","methods","db","Chat","chats","ChatUser","chatusers","on","socket","console","log","message","walletAddress","filter","update","logined","updateOne","existingUser","findOne","unreadmsg","length","map","item","index","id","reader","readed","username","result","newreader","updateuser","find","updateMessage","emit","alert","userData","to","newUser","avatar","avatarUrl","save","updateMessages","updateUser","read","ids","Types","ObjectId","aggregate","$match","$project","_id","err","push","newMessage","userName","image","timestamp","Date","then","data","users","user","module","exports"],"mappings":"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","sourcesContent":["const { Server } = require(\"socket.io\");\r\nconst mongoose = require('mongoose');\r\n\r\nconst createSocketServer = (httpServer) => {\r\n  const io = new Server(httpServer, {\r\n    cors: {\r\n      origin: \"*\",\r\n      methods: [\"GET\", \"POST\"]\r\n    }\r\n  });\r\n// const db = mongoose.connection;\r\nconst db = require(\"./models\");\r\nconst Chat = db.chats;\r\nconst ChatUser = db.chatusers\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('a user connected');\r\n  //-----------------format-------------------------\r\n  socket.on('format', async(message) => {\r\n    const walletAddress = message.walletAddress;\r\n    console.log('wallet: ', walletAddress);\r\n    const filter = {walletAddress: walletAddress};\r\n    const update = {logined: false};\r\n    const existingUser = await ChatUser.updateOne(filter, update);\r\n  })\r\n\r\n\r\n  //-----------------wallet---------------------------\r\n  socket.on('wallet', async(message) => {\r\n    // console.log('wallet', message.walletAddress);\r\n    const walletAddress = message.walletAddress;\r\n    const existingUser = await ChatUser.findOne({ walletAddress: walletAddress });\r\n    // console.log('user', existingUser)\r\n      if (existingUser) {\r\n        // console.log('abv');\r\n        if(existingUser.unreadmsg.length>0){\r\n          existingUser.unreadmsg.map(async (item, index) => {\r\n            // console.log('item', item);\r\n            const reader = await Chat.findOne({id: item});\r\n            // console.log('red', reader);\r\n            if (reader == null) {\r\n              // console.log('chat is impty');\r\n            }\r\n            else{\r\n              const filter = { id: item };\r\n              const update = { readed: [...reader.readed, existingUser.username] };\r\n              // const update = { readed: [...reader.readed, existing.username] };\r\n              const result = await Chat.updateOne(filter, update);\r\n              const newreader = await Chat.findOne({id: item})\r\n              // console.log('update',newreader);\r\n              // io.emit('message', newreader);\r\n            }\r\n            // io.to(reader).emit('message-read', messageList)\r\n          })\r\n        const filter = { username: existingUser.username };\r\n        const update = { unreadmsg: [] };\r\n        const result = await ChatUser.updateOne(filter, update);\r\n        const updateuser = await ChatUser.findOne({username: existingUser.username})\r\n        const updateMessage = await Chat.find({});\r\n        // console.log('readed', updateuser)\r\n        io.emit('checked', updateMessage);\r\n        // console.log('all:', updateMessage);\r\n        io.emit('Alert', {walletAddress: existingUser.walletAddress, alert: 0});\r\n      }\r\n    }\r\n  })\r\n  //-----------------login-------------------------\r\n  socket.on('login', async(userData) => {\r\n    console.log('sdfsfsdf')\r\n    console.log(userData);\r\n    const existingUser = await ChatUser.findOne({ username: userData.username });\r\n    console.log('existingUser:', existingUser);\r\n    if (existingUser) {\r\n      const message= 'user is already existed.'\r\n      io.to(socket.id).emit('userexist', message);\r\n    }\r\n    else {\r\n      const newUser = new ChatUser({ \r\n        id: socket.id,\r\n        username: userData.username, \r\n        walletAddress: userData.walletAddress, \r\n        avatar: userData.avatarUrl,\r\n        logined: true, \r\n        unreadmsg: [] \r\n      });\r\n      newUser.save();\r\n      io.to(socket.id).emit('login', newUser);\r\n      const updateMessages = await Chat.find({});\r\n      updateMessages.map(async (item) => {\r\n        \r\n        const filter = { id: item.id };\r\n        const update = { readed: [newUser.username] };\r\n        // const update = { readed: [...reader.readed, existing.username] };\r\n        const result = await Chat.updateOne(filter, update);\r\n      })\r\n      const updateMessage = await Chat.find({});\r\n      console.log('readed', updateMessage)\r\n      io.emit('checked', updateMessage);\r\n    }\r\n  })\r\n\r\n  // socket.on('getmessage', (messageData) => {\r\n  //   const\r\n  // })\r\n//----------------logout--------------------\r\n  socket.on('logout', async (message) => {\r\n    const filter = {username: message.username}\r\n    const update = {logined: message.logined}\r\n    const updateUser = await ChatUser.updateOne(filter, update);\r\n    // console.log('us', updateUser);\r\n  });\r\n//-----------------message------------------\r\n  socket.on('message', async (message) => {\r\n    \r\n    // let messageData;\r\n\r\n    // if (message.message instanceof FormData) {\r\n    //   // Handle FormData message\r\n    //   const file = message.get('file');\r\n    //   const fileUrl = await uploadFileToStorage(file);\r\n    //   messageData = { fileUrl };\r\n    // } else {\r\n    //   // Handle string message\r\n    //   messageData = { text: message };\r\n    // }\r\n\r\n    // await Message.create(messageData);\r\n    // console.log('New message:', message);\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 1\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map((item, index)=> {\r\n          // console.log(message.username);\r\n          if(item.username != message.username) read.push(item.username)\r\n        })\r\n        console.log(message.username, message.message);\r\n        const newMessage = new Chat({\r\n          id: ids,\r\n          userName: message.username,\r\n          avatar: message.avatar,\r\n          message: message.message,\r\n          image: message.image,\r\n          timestamp: new Date(), // Save the current server time to the database\r\n          readed: read\r\n        });\r\n        newMessage.save().then((data) => {\r\n          console.log('Successfully Created!');\r\n        });\r\n        \r\n        // const messages = Chat.find({});\r\n        io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n    // console.log('message: ', message);\r\n    \r\n  });\r\n  \r\n  socket.on('upload', (message) => {\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n      result.map((item, index)=> {\r\n        // console.log(message.username);\r\n        if(item.username != message.username) read.push(item.username)\r\n      })\r\n      // console.log(read);\r\n      const newMessage = new Chat({\r\n        id: ids,\r\n        userName: message.username,\r\n        avatar: message.avatar,\r\n        message: message.message,\r\n        timestamp: new Date(), // Save the current server time to the database\r\n        readed: read\r\n      });\r\n      newMessage.save();\r\n      \r\n      // const messages = Chat.find({});\r\n      io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n  })\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Client disconnected');\r\n  });\r\n});\r\n\r\n// const PORT = 8080;\r\n// httpServer.listen(PORT, () => {\r\n//   console.log(`Socket.IO server is running on port ${PORT}`);\r\n// });\r\n}\r\nmodule.exports = createSocketServer;\r\n"],"file":"socketServer.dev.js"}