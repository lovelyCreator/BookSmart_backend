{"version":3,"sources":["socketServer.js"],"names":["require","Server","mongoose","createSocketServer","httpServer","io","cors","origin","methods","Chat","db","chats","on","console","log","message","walletAddress","filter","update","regeneratorRuntime","async","_context","prev","next","logined","awrap","ChatUser","updateOne","sent","stop","existingUser","updateMessage","_context3","findOne","unreadmsg","length","reader","_filter","_update","_context2","id","item","readed","concat","_toConsumableArray","username","find","emit","alert","socket","userData","newUser","_context5","to","avatar","avatarUrl","save","map","_context4","_context6","read","ids","Types","ObjectId","aggregate","$match","err","result","index","push","updateuser","userName","timestamp","Date","then","data","newMessage","_id","user","_context7","updateMessages","$project","updateUser","module","exports"],"mappings":"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","file":"socketServer.min.js","sourcesContent":["const { Server } = require(\"socket.io\");\r\nconst mongoose = require('mongoose');\r\n\r\nconst createSocketServer = (httpServer) => {\r\n  const io = new Server(httpServer, {\r\n    cors: {\r\n      origin: \"*\",\r\n      methods: [\"GET\", \"POST\"]\r\n    }\r\n  });\r\n// const db = mongoose.connection;\r\nconst db = require(\"./models\");\r\nconst Chat = db.chats;\r\nconst ChatUser = db.chatusers\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('a user connected');\r\n  //-----------------format-------------------------\r\n  socket.on('format', async(message) => {\r\n    const walletAddress = message.walletAddress;\r\n    console.log('wallet: ', walletAddress);\r\n    const filter = {walletAddress: walletAddress};\r\n    const update = {logined: false};\r\n    const existingUser = await ChatUser.updateOne(filter, update);\r\n  })\r\n\r\n\r\n  //-----------------wallet---------------------------\r\n  socket.on('wallet', async(message) => {\r\n    // console.log('wallet', message.walletAddress);\r\n    const walletAddress = message.walletAddress;\r\n    const existingUser = await ChatUser.findOne({ walletAddress: walletAddress });\r\n    // console.log('user', existingUser)\r\n      if (existingUser) {\r\n        // console.log('abv');\r\n        if(existingUser.unreadmsg.length>0){\r\n          existingUser.unreadmsg.map(async (item, index) => {\r\n            // console.log('item', item);\r\n            const reader = await Chat.findOne({id: item});\r\n            // console.log('red', reader);\r\n            if (reader == null) {\r\n              // console.log('chat is impty');\r\n            }\r\n            else{\r\n              const filter = { id: item };\r\n              const update = { readed: [...reader.readed, existingUser.username] };\r\n              // const update = { readed: [...reader.readed, existing.username] };\r\n              const result = await Chat.updateOne(filter, update);\r\n              const newreader = await Chat.findOne({id: item})\r\n              // console.log('update',newreader);\r\n              // io.emit('message', newreader);\r\n            }\r\n            // io.to(reader).emit('message-read', messageList)\r\n          })\r\n        const filter = { username: existingUser.username };\r\n        const update = { unreadmsg: [] };\r\n        const result = await ChatUser.updateOne(filter, update);\r\n        const updateuser = await ChatUser.findOne({username: existingUser.username})\r\n        const updateMessage = await Chat.find({});\r\n        // console.log('readed', updateuser)\r\n        io.emit('checked', updateMessage);\r\n        // console.log('all:', updateMessage);\r\n        io.emit('Alert', {walletAddress: existingUser.walletAddress, alert: 0});\r\n      }\r\n    }\r\n  })\r\n  //-----------------login-------------------------\r\n  socket.on('login', async(userData) => {\r\n    console.log('sdfsfsdf')\r\n    console.log(userData);\r\n    const existingUser = await ChatUser.findOne({ username: userData.username });\r\n    console.log('existingUser:', existingUser);\r\n    if (existingUser) {\r\n      const message= 'user is already existed.'\r\n      io.to(socket.id).emit('userexist', message);\r\n    }\r\n    else {\r\n      const newUser = new ChatUser({ \r\n        id: socket.id,\r\n        username: userData.username, \r\n        walletAddress: userData.walletAddress, \r\n        avatar: userData.avatarUrl,\r\n        logined: true, \r\n        unreadmsg: [] \r\n      });\r\n      newUser.save();\r\n      io.to(socket.id).emit('login', newUser);\r\n      const updateMessages = await Chat.find({});\r\n      updateMessages.map(async (item) => {\r\n        \r\n        const filter = { id: item.id };\r\n        const update = { readed: [newUser.username] };\r\n        // const update = { readed: [...reader.readed, existing.username] };\r\n        const result = await Chat.updateOne(filter, update);\r\n      })\r\n      const updateMessage = await Chat.find({});\r\n      console.log('readed', updateMessage)\r\n      io.emit('checked', updateMessage);\r\n    }\r\n  })\r\n\r\n  // socket.on('getmessage', (messageData) => {\r\n  //   const\r\n  // })\r\n//----------------logout--------------------\r\n  socket.on('logout', async (message) => {\r\n    const filter = {username: message.username}\r\n    const update = {logined: message.logined}\r\n    const updateUser = await ChatUser.updateOne(filter, update);\r\n    // console.log('us', updateUser);\r\n  });\r\n//-----------------message------------------\r\n  socket.on('message', async (message) => {\r\n    \r\n    // let messageData;\r\n\r\n    // if (message.message instanceof FormData) {\r\n    //   // Handle FormData message\r\n    //   const file = message.get('file');\r\n    //   const fileUrl = await uploadFileToStorage(file);\r\n    //   messageData = { fileUrl };\r\n    // } else {\r\n    //   // Handle string message\r\n    //   messageData = { text: message };\r\n    // }\r\n\r\n    // await Message.create(messageData);\r\n    // console.log('New message:', message);\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 1\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map((item, index)=> {\r\n          // console.log(message.username);\r\n          if(item.username != message.username) read.push(item.username)\r\n        })\r\n        console.log(message.username, message.message);\r\n        const newMessage = new Chat({\r\n          id: ids,\r\n          userName: message.username,\r\n          avatar: message.avatar,\r\n          message: message.message,\r\n          image: message.image,\r\n          timestamp: new Date(), // Save the current server time to the database\r\n          readed: read\r\n        });\r\n        newMessage.save().then((data) => {\r\n          console.log('Successfully Created!');\r\n        });\r\n        \r\n        // const messages = Chat.find({});\r\n        io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n    // console.log('message: ', message);\r\n    \r\n  });\r\n  \r\n  socket.on('upload', (message) => {\r\n    const read = [];\r\n    const ids = mongoose.Types.ObjectId();\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: true } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          avatar: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n      result.map((item, index)=> {\r\n        // console.log(message.username);\r\n        if(item.username != message.username) read.push(item.username)\r\n      })\r\n      // console.log(read);\r\n      const newMessage = new Chat({\r\n        id: ids,\r\n        userName: message.username,\r\n        avatar: message.avatar,\r\n        message: message.message,\r\n        timestamp: new Date(), // Save the current server time to the database\r\n        readed: read\r\n      });\r\n      newMessage.save();\r\n      \r\n      // const messages = Chat.find({});\r\n      io.emit('message', newMessage);\r\n      }\r\n    });\r\n    ChatUser.aggregate([\r\n      { \r\n        $match: { logined: false } \r\n      },\r\n      {\r\n        $project: { \r\n          _id: 0, \r\n          username: 1,\r\n          unreadmsg: 2\r\n        }\r\n      }\r\n    ], function (err, result) {\r\n      if (err) {\r\n        // Handle error\r\n      } else {\r\n        // console.log(result);\r\n        // Process the result\r\n        result.map(async(item, index)=> {\r\n        // console.log(message.username);        \r\n          const filter = { username: item.username };\r\n          const update = { unreadmsg: [...item.unreadmsg, ids ] };\r\n          const users = await ChatUser.updateOne(filter, update);\r\n          // const updateUser = ChatUser.updateOne({ username: item.username }, { $push: { unreadmsg: message._id } })\r\n          const user = await ChatUser.findOne({username: item.username});\r\n          io.emit('Alert', {walletAddress: user.walletAddress, alert: user.unreadmsg.length});\r\n        \r\n        console.log('up', user);\r\n      })\r\n      // // console.log(read);\r\n      // const newMessage = new Chat({\r\n      //   userName: message.username,\r\n      //   message: message.message,\r\n      //   timestamp: new Date(), // Save the current server time to the database\r\n      //   readed: read\r\n      // });\r\n      // newMessage.save();\r\n      // // const messages = Chat.find({});\r\n      // io.emit('message', newMessage);\r\n      }\r\n    });\r\n  })\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Client disconnected');\r\n  });\r\n});\r\n\r\n// const PORT = 8080;\r\n// httpServer.listen(PORT, () => {\r\n//   console.log(`Socket.IO server is running on port ${PORT}`);\r\n// });\r\n}\r\nmodule.exports = createSocketServer;\r\n"]}