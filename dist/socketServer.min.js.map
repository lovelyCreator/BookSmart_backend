{"version":3,"sources":["socketServer.js"],"names":["http","require","Server","httpServer","createServer","io","origin","mongoose","db","chats","on","socket","console","log","message","Chat","username","Date","save","emit","newMessage","timestamp","PORT","listen"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,iBACFA,QAAQ,aAAnBC,gBAAAA,OADFF,SAAOC,QAAO,YAGdE,WAAaH,KAAKI,eAClBC,GAAK,IAHQJ,OAAOE,WAAA,CAAlBD,KAIE,CACJI,OAAQ,wBAJRC,QAAWN,CAAAA,MAAQ,WAGjBO,GAAEP,QAAA,gBACJK,KAAQE,GAAAC,MADJJ,GAAAK,GAAA,aAAA,SAAAC,GADVC,QAMAC,IAAA,oBAMEF,EAAOD,GAAG,UAAW,SAACI,GALlBN,QAAKP,IAAO,eAAlBa,GAOuB,IAAIC,KAAK,CAN1BA,SAAUN,EAAhBO,SAEMF,QAAAA,EAAcA,QAClBF,UAAY,IAAAK,OAEVC,OACAb,GAAAc,KAAMC,UAAaN,KAGjBO,EAAAA,GAAAA,aAAW,WAObT,QAAQC,IAAI,2BAwBhB,IAAMS,KAAO,KAAbnB,WAAaoB,OAAbD,KAAA,WACAnB,QAAUU,IAAVV,uCAAAA,OAA8BmB","file":"socketServer.min.js","sourcesContent":["const http = require('http');\r\nconst { Server } = require(\"socket.io\");\r\nconst mongoose = require('mongoose');\r\nconst httpServer = http.createServer();\r\nconst io = new Server(httpServer, {\r\n    cors: {\r\n      origin: \"http://localhost:3000\",\r\n      methods: [\"GET\", \"POST\"]\r\n    }\r\n  });\r\n// const db = mongoose.connection;\r\nconst db = require(\"./app/models\");\r\nconst Chat = db.chats;\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('a user connected');\r\n  socket.on('message', (message) => {\r\n    console.log('New message:', message);\r\n    const newMessage = new Chat({\r\n      userName: message.username,\r\n      message: message.message,\r\n      timestamp: new Date() // Save the current server time to the database\r\n    });\r\n    newMessage.save();\r\n    io.emit('message', message);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Client disconnected');\r\n  });\r\n});\r\n\r\n\r\n// io.on('connection', (socket) => {\r\n//   console.log('New client connected');\r\n\r\n//   socket.on('message', (message) => {\r\n//     console.log('New message:', message);\r\n//     const newMessage = new Chat({\r\n//       userName: message.username,\r\n//       message: message.message,\r\n//       timestamp: new Date() // Save the current server time to the database\r\n//     });\r\n//     newMessage.save();\r\n//     io.emit('message', message);\r\n//   });\r\n\r\n//   socket.on('disconnect', () => {\r\n//     console.log('Client disconnected');\r\n//   });\r\n// });\r\n\r\nconst PORT = 8080;\r\nhttpServer.listen(PORT, () => {\r\n  console.log(`Socket.IO server is running on port ${PORT}`);\r\n});"]}