{"version":3,"sources":["socketServer.js"],"names":["http","require","Server","mongoose","httpServer","createServer","io","cors","origin","methods","db","Chat","chats","on","socket","console","log","message","newMessage","userName","username","timestamp","Date","save","emit","PORT","listen"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;eACmBA,OAAO,CAAC,WAAD,C;IAAlBC,M,YAAAA,M;;AACR,IAAMC,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMG,UAAU,GAAGJ,IAAI,CAACK,YAAL,EAAnB;AACA,IAAMC,EAAE,GAAG,IAAIJ,MAAJ,CAAWE,UAAX,EAAuB;AAC9BG,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,uBADJ;AAEJC,IAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;AAFL;AADwB,CAAvB,CAAX,C,CAMA;;AACA,IAAMC,EAAE,GAAGT,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAMU,IAAI,GAAGD,EAAE,CAACE,KAAhB;AAEAN,EAAE,CAACO,EAAH,CAAM,YAAN,EAAoB,UAACC,MAAD,EAAY;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAF,EAAAA,MAAM,CAACD,EAAP,CAAU,SAAV,EAAqB,UAACI,OAAD,EAAa;AAChCF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,OAA5B;AACA,QAAMC,UAAU,GAAG,IAAIP,IAAJ,CAAS;AAC1BQ,MAAAA,QAAQ,EAAEF,OAAO,CAACG,QADQ;AAE1BH,MAAAA,OAAO,EAAEA,OAAO,CAACA,OAFS;AAG1BI,MAAAA,SAAS,EAAE,IAAIC,IAAJ,EAHe,CAGJ;;AAHI,KAAT,CAAnB;AAKAJ,IAAAA,UAAU,CAACK,IAAX;AACAjB,IAAAA,EAAE,CAACkB,IAAH,CAAQ,SAAR,EAAmBP,OAAnB;AACD,GATD;AAWAH,EAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BE,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,GAFD;AAGD,CAhBD,E,CAmBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAMS,IAAI,GAAG,IAAb;AACArB,UAAU,CAACsB,MAAX,CAAkBD,IAAlB,EAAwB,YAAM;AAC5BV,EAAAA,OAAO,CAACC,GAAR,+CAAmDS,IAAnD;AACD,CAFD","sourcesContent":["const http = require('http');\r\nconst { Server } = require(\"socket.io\");\r\nconst mongoose = require('mongoose');\r\nconst httpServer = http.createServer();\r\nconst io = new Server(httpServer, {\r\n    cors: {\r\n      origin: \"http://localhost:3000\",\r\n      methods: [\"GET\", \"POST\"]\r\n    }\r\n  });\r\n// const db = mongoose.connection;\r\nconst db = require(\"./app/models\");\r\nconst Chat = db.chats;\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('a user connected');\r\n  socket.on('message', (message) => {\r\n    console.log('New message:', message);\r\n    const newMessage = new Chat({\r\n      userName: message.username,\r\n      message: message.message,\r\n      timestamp: new Date() // Save the current server time to the database\r\n    });\r\n    newMessage.save();\r\n    io.emit('message', message);\r\n  });\r\n\r\n  socket.on('disconnect', () => {\r\n    console.log('Client disconnected');\r\n  });\r\n});\r\n\r\n\r\n// io.on('connection', (socket) => {\r\n//   console.log('New client connected');\r\n\r\n//   socket.on('message', (message) => {\r\n//     console.log('New message:', message);\r\n//     const newMessage = new Chat({\r\n//       userName: message.username,\r\n//       message: message.message,\r\n//       timestamp: new Date() // Save the current server time to the database\r\n//     });\r\n//     newMessage.save();\r\n//     io.emit('message', message);\r\n//   });\r\n\r\n//   socket.on('disconnect', () => {\r\n//     console.log('Client disconnected');\r\n//   });\r\n// });\r\n\r\nconst PORT = 8080;\r\nhttpServer.listen(PORT, () => {\r\n  console.log(`Socket.IO server is running on port ${PORT}`);\r\n});"],"file":"socketServer.dev.js"}